--- qemu-2.3.0/linux-user/syscall.c.orig	2015-04-27 07:08:26.000000000 -0700
+++ qemu-2.3.0/linux-user/syscall.c	2015-09-17 21:29:11.174576976 -0700
@@ -204,6 +204,8 @@
 #define TARGET_NR__llseek TARGET_NR_llseek
 #endif
 
+static bool last_read_empty = false;
+
 #ifdef __NR_gettid
 _syscall0(int, gettid)
 #else
@@ -227,7 +229,21 @@
 _syscall3(int,sys_rt_sigqueueinfo,int,pid,int,sig,siginfo_t *,uinfo)
 _syscall3(int,sys_syslog,int,type,char*,bufp,int,len)
 #if defined(TARGET_NR_tgkill) && defined(__NR_tgkill)
-_syscall3(int,sys_tgkill,int,tgid,int,pid,int,sig)
+
+extern unsigned int afl_forksrv_pid;
+
+static int sys_tgkill(int tgid, int pid, int sig) {
+
+  /* Workaround for -lpthread to make abort() work properly, without
+     killing the forkserver due to a prematurely cached PID. */
+
+  if (afl_forksrv_pid && afl_forksrv_pid == pid && sig == SIGABRT)
+    pid = tgid = getpid();
+
+  return syscall(__NR_sys_tgkill, pid, tgid, sig);
+
+}
+
 #endif
 #if defined(TARGET_NR_tkill) && defined(__NR_tkill)
 _syscall2(int,sys_tkill,int,tid,int,sig)
@@ -5572,6 +5588,14 @@
             if (!(p = lock_user(VERIFY_WRITE, arg2, arg3, 0)))
                 goto efault;
             ret = get_errno(read(arg1, p, arg3));
+            if (ret == 0) {
+                if (last_read_empty) {
+                    exit_group(1);
+                }
+                last_read_empty = true;
+            } else {
+                last_read_empty = false;
+            }
             unlock_user(p, arg2, ret);
         }
         break;
